/*
    在日常开发中，使用最广的数据结构之一就是数组，在 Rust 中，最常用的数组有两种，
    第一种是速度很快但是长度固定的 array，
    第二种是可动态增长的但是有性能损耗的 Vector，
    在本书中，我们称 array 为数组，Vector 为动态数组。

    数组是 Rust 的基本类型，是固定长度的，这点与其他编程语言不同，其它编程语言的数组往往是可变长度的，与 Rust 中的动态数组 Vector 类似。
    1、数组 array 是存储在栈上，性能也会非常优秀
    2、动态数组 Vector 是存储在堆上，因此长度可以动态改变。
*/

pub fn test() {
    // 数组的元素类型要统一，长度要固定。
    let array_1 = [1, 2, 3, 4, 5, 6]; // 直接声明
    let _array_2: [i32; 3] = [1, 2, 3]; // 指明类型和长度
    let _array_3 = [1; 5]; // 某个值重复出现 N 次的数组

    println!("{}", array_1[0]); // 数组元素的获取可以直接使用取地址符
}

// 基本类型在 Rust 中赋值是以 Copy 的形式，很可惜复杂类型都没有自动实现深拷贝，只能一个个创建。
pub fn test_2() {
    let _array: [String; 3] = [String::from("1"), String::from("2"), String::from("3")];
    // 作为一个追求极致完美的Rust开发者，怎么能容忍上面这么难看的代码存在！

    let _result: [String; 8] = std::array::from_fn(|i| format!("{}-{}", "content", i));
}

// 多维数组
pub fn test_3() {
    let _a1 = [[1, 2, 3], [2, 3, 4]];
    let _a2: [[u8; 1]; 3] = [[1], [2], [3]];
    let _a3 = [[0; 3], [1; 3]];
}
