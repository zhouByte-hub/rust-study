/**
 * Rust 通过 借用(Borrowing) 这个概念来达成上述的目的，获取变量的引用，称之为借用(borrowing)。
 * Rust中的引用就是把值借给某个变量，所有权并没转移，等某个变量使用完后还需要归还该变量。
 * 引用默认是不可变引用，如果想要让引用可变，那么就需要一开始的变量就是可变的，mut
 */

// 引用和解引用
pub fn test_1() {
    let x = 5;
    let y = &x;
    println!("{}", *y);
}

/** 引用规则
 *  1、在同一时间，要么有多个不可变借用 (&T)，要么只有一个可变借用 (&mut T)，
 *     可变引用是排他的。 一旦你创建了一个可变引用，你就不能再使用原始的所有者（变量本身），也不能再创建任何其他引用（无论是可变还是不可变），直到这个可变引用的作用域结束。
 *  2、可变引用与不可变引用不能同时存在
 */
pub fn test_2() {
    let mut x = 5;
    let mut _y = &mut x;
    // let mut b = &mut x; // 会报错，违反条件1

    // let b = &x; // 会报错，违反条件2

    // let b = x;  // 会报错，违反条件1
}
