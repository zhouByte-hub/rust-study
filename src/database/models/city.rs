//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use sea_orm::entity::prelude::*;
use crate::database::models::{driving_school};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "city")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub city_name: String,
    pub city_code: String,
    pub city_index: String,
    #[sea_orm(column_type = "Double", nullable)]
    pub longitude: Option<f64>,
    #[sea_orm(column_type = "Double", nullable)]
    pub latitude: Option<f64>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {

    #[sea_orm(has_one = "driving_school::Entity")]
    DriverSchool
}

// 告诉 SeaORM 框架：City 实体与 DrivingSchool 实体之间存在关联关系
// 并指定关联关系的类型为 HasOne，即一对一关系
impl Related<driving_school::Entity> for Entity {

    fn to() -> RelationDef {
        /*  这是 Related trait 要求实现的方法，用于指定“如何从当前实体跳转到目标实体”。
            调用你在 Relation 枚举中定义的 DriverSchool 变体的 def() 方法，返回一个 RelationDef（关系定义对象），告诉 SeaORM：
                1、关联的目标是哪个表
                2、使用哪个外键字段
                3、是 has_many、has_one 还是 belongs_to
            当前实体通过 DriverSchool 这个关系连接到 driving_school 实体
         */
        Relation::DriverSchool.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
